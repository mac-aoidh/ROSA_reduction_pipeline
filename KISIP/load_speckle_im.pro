FUNCTION load_speckle_im, filename, imsize=imsize
;-------------------------------------------------------------
;+
; NAME:
;       LOAD_SPECKLE_IM
; PURPOSE:
;       Read a speckle reconstructed image file generated by KISIP v6
; CATEGORY:
; CALLING SEQUENCE:
;       load_speckle_im, filename
; INPUTS:
;       filename = name of processed speckle file   in
;                  it should end in '.final'
; KEYWORD PARAMETERS:
;         IMSIZE = Either an INTARR(2) array containing the size ([nx, ny])
;                  of the processed file, or for square files an INTARR(1) 
;                  or scalar containing the size for both x and y.
; OUTPUTS:
; COMMON BLOCKS:
;       none
; NOTES:
;       If IMSIZE is not given, then the program looks for the '.log' file
;       in the same directory and with the same naming scheme that contains
;       information on the size of the stored array  
; MODIFICATION HISTORY:
;-------------------------------------------------------------

default_size = [1000,1000]

IF N_ELEMENTS(filename) LT 1 THEN filename = ''
file_read = 0
logfile   = ''

ON_IOERROR, bad_read

IF N_ELEMENTS(filename) NE 0 THEN BEGIN
    IF STRLEN(filename) GE 5 THEN BEGIN
        logfile = STRMID(filename,0,STRPOS(filename,'.final')-3) + 'log' 
    ENDIF 
ENDIF

IF N_ELEMENTS(imsize) GE 2 THEN BEGIN
    imagesizex=imsize[0] & imagesizey=imsize[1]
ENDIF ELSE IF N_ELEMENTS(imsize) EQ 1 THEN BEGIN
    imagesizex=imsize & imagesizey=imsize
ENDIF ELSE IF FILE_TEST(logfile,/READ) THEN BEGIN
    spawn,'grep imagesizex ' + logfile,command_line
    command_line = command_line[0]
    IF STRMATCH(command_line,'imagesizex*=*') THEN setdim = EXECUTE(command_line)

    spawn,'grep imagesizey ' + logfile,command_line
    command_line = command_line[0]
    IF STRMATCH(command_line,'imagesizey*=*') THEN setdim = EXECUTE(command_line)
ENDIF ELSE BEGIN
    imagesizex = default_size[0]
    imagesizey = default_size[1]
ENDELSE        

imin = FLTARR(imagesizex,imagesizey)

IF FILE_TEST(filename, /READ) THEN BEGIN
    OPENR, spkin_lun, filename, /GET_LUN
    READU, spkin_lun, imin
    CLOSE, spkin_lun
    FREE_LUN,spkin_lun
    file_read = 1

    bad_read: IF file_read EQ 0 THEN $
        PRINT,'Error when reading "' + STRTRIM(filename,2) + '"'

    nans  = WHERE(FINITE(imin) EQ 0, count_nans)
    valid = WHERE(FINITE(imin) EQ 1, count_valid)
    IF count_nans GE 1 THEN imin[nans] = MEDIAN(imin[valid])
ENDIF ELSE BEGIN
    PRINT,'Error! Filename "' + STRTRIM(filename,2) + '" not found.'
ENDELSE

RETURN, imin

END
